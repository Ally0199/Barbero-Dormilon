{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red0\green185\blue185;\red2\green168\blue148;\red128\green128\blue255;\red0\green128\blue128;\red128\green0\blue0;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red128\green255\blue255;\red64\green64\blue128;\red133\green133\blue172;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs20 \cb3\cf13 #include <iostream>
\par #include <stdlib.h>
\par #include <time.h>
\par #include <cstdlib>
\par #include <conio.h>
\par #include <windows.h>
\par #include <unistd.h>
\par #include <cstdlib>
\par #include <stdio.h>
\par #include "Barbero.h"
\par 
\par \cb3\cf11\b using namespace \b0\cb3\cf13\b std\b0\cb3\cf22 ;
\par 
\par \cb1\cf0 Barbero\cb3\cf22 * \cb1\cf0 myBarbero\cb3\cf22 = \cb3\cf11\b new \b0\cb1\cf0 Barbero\cb3\cf22 ;\cb3\cf5 //Se crea un Barbero
\par 
\par \cb3\cf11\b int \b0\cb1\cf0 SillasEspera\cb3\cf22 [\cb3\cf9 4\cb3\cf22 ]; \cb3\cf5 //Arreglo de Sillas de Espera
\par \cb3\cf11\b int \b0\cb1\cf0 SillaBarbero\cb3\cf22 ; \cb3\cf5 // Silla del Barbero
\par 
\par \cb3\cf11\b int \b0\cb1\cf0 SemaforoCliente\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ; \cb3\cf5 //Semaforo que inidcara si un cliente encontro silla
\par 
\par \cb3\cf11\b int \b0\cb1\cf0 UltimaPos\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ; \cb3\cf5 //Guarda la ultima en la que se asigno un cliente en las sillas de espera
\par 
\par \cb3\cf11\b int \b0\cb1\cf0 Time\cb3\cf22 ,\cb1\cf0 b\cb3\cf22 ; \cb3\cf5 //Time se encarga del limite de trabajo del Barbero, mientras que b cuenta el trabajo del Barbero
\par 
\par //Funcion para acomodar las salidas de pantalla
\par \cb3\cf11\b void \b0\cb1\cf0 gotoxy\cb3\cf22 (\cb3\cf11\b int \b0\cb1\cf0 x\cb3\cf22 ,\cb3\cf11\b int \b0\cb1\cf0 y\cb3\cf22 )\{
\par       \cb1\cf0 HANDLE hcon\cb3\cf22 ;
\par       \cb1\cf0 hcon \cb3\cf22 = \cb1\cf0 GetStdHandle\cb3\cf22 (\cb1\cf0 STD_OUTPUT_HANDLE\cb3\cf22 );
\par       \cb1\cf0 COORD dwPos\cb3\cf22 ;
\par       \cb1\cf0 dwPos\cb3\cf22 .\cb1\cf0 X \cb3\cf22 = \cb1\cf0 x\cb3\cf22 ;
\par       \cb1\cf0 dwPos\cb3\cf22 .\cb1\cf0 Y\cb3\cf22 = \cb1\cf0 y\cb3\cf22 ;
\par       \cb1\cf0 SetConsoleCursorPosition\cb3\cf22 (\cb1\cf0 hcon\cb3\cf22 ,\cb1\cf0 dwPos\cb3\cf22 );
\par  \}
\par 
\par \cb3\cf5 //Se inician las sillas en 0 (Desocupadas)
\par \cb3\cf11\b void \b0\cb1\cf0 IniciarSillas\cb3\cf22 ()
\par \{
\par     \cb3\cf11\b for\b0\cb3\cf22 (\cb3\cf11\b int \b0\cb1\cf0 i\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ; \cb1\cf0 i\cb3\cf22 <=\cb3\cf9 4\cb3\cf22 ; \cb1\cf0 i\cb3\cf22 ++)
\par     \{
\par         \cb1\cf0 SillasEspera\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ]=\cb3\cf9 0\cb3\cf22 ;
\par     \}
\par     \cb1\cf0 SillaBarbero\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ;
\par \}
\par 
\par \cb3\cf5 //Funcion para imprimir el estado de las Sillas y el estado del Barbero
\par \cb3\cf11\b void \b0\cb1\cf0 Imprimir\cb3\cf22 ()
\par \{
\par     \cb1\cf0 Sleep\cb3\cf22 (\cb3\cf9 2000\cb3\cf22 );
\par     \cb1\cf0 system\cb3\cf22 (\cb3\cf17 "cls"\cb3\cf22 );
\par     \cb3\cf11\b int \b0\cb1\cf0 x\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ;
\par     \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 myBarbero\cb3\cf22 ->\cb1\cf0 getEstado\cb3\cf22 ()==\cb3\cf9 0\cb3\cf22 )
\par     \{
\par         \cb3\cf13\b cout\b0\cb3\cf22 <<\cb3\cf17 "Barbero: DURMIENDO"\cb3\cf22 <<\cb3\cf13\b endl\b0\cb3\cf22 ;
\par         \cb3\cf13\b cout\b0\cb3\cf22 <<\cb3\cf13\b endl\b0\cb3\cf22 ;
\par     \}
\par     \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 myBarbero\cb3\cf22 ->\cb1\cf0 getEstado\cb3\cf22 ()==\cb3\cf9 1\cb3\cf22 )
\par     \{
\par         \cb3\cf13\b cout\b0\cb3\cf22 <<\cb3\cf17 "Barbero: TRABAJANDO"\cb3\cf22 <<\cb3\cf13\b endl\b0\cb3\cf22 ;
\par         \cb3\cf13\b cout\b0\cb3\cf22 <<\cb3\cf13\b endl\b0\cb3\cf22 ;
\par     \}
\par     \cb3\cf11\b for\b0\cb3\cf22 (\cb3\cf11\b int \b0\cb1\cf0 i\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ; \cb1\cf0 i\cb3\cf22 <\cb3\cf9 4\cb3\cf22 ; \cb1\cf0 i\cb3\cf22 ++)
\par     \{
\par         \cb3\cf13\b cout\b0\cb3\cf22 <<\cb3\cf17 "   "\cb3\cf22 <<\cb1\cf0 SillasEspera\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ];
\par     \}
\par     \cb3\cf5 //For para imprimir el numero de Sillas de Espera
\par     \cb3\cf11\b for\b0\cb3\cf22 (\cb3\cf11\b int \b0\cb1\cf0 a\cb3\cf22 =\cb3\cf9 2\cb3\cf22 ; \cb1\cf0 a\cb3\cf22 <=\cb3\cf9 5\cb3\cf22 ; \cb1\cf0 a\cb3\cf22 ++)
\par     \{
\par         \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 x\cb3\cf22 <\cb3\cf9 100\cb3\cf22 )
\par         \{
\par             \cb1\cf0 gotoxy\cb3\cf22 (\cb1\cf0 x\cb3\cf22 ,\cb3\cf9 3\cb3\cf22 );
\par             \cb3\cf13\b cout\b0\cb3\cf22 <<\cb3\cf17 "   _"\cb3\cf22 <<\cb3\cf13\b endl\b0\cb3\cf22 ;
\par             \cb1\cf0 gotoxy\cb3\cf22 (\cb1\cf0 x\cb3\cf22 ,\cb3\cf9 4\cb3\cf22 );
\par             \cb3\cf13\b cout\b0\cb3\cf22 <<\cb3\cf17 "   "\cb3\cf22 <<\cb1\cf0 a\cb3\cf22 ;
\par             \cb1\cf0 x\cb3\cf22 =\cb1\cf0 x\cb3\cf22 +\cb3\cf9 4\cb3\cf22 ;
\par         \}
\par 
\par     \}
\par     \cb3\cf13\b cout\b0\cb3\cf22 <<\cb3\cf13\b endl\b0\cb3\cf22 ;
\par     \cb3\cf13\b cout\b0\cb3\cf22 <<\cb3\cf13\b endl\b0\cb3\cf22 ;
\par     \cb1\cf0 gotoxy\cb3\cf22 (\cb3\cf9 6\cb3\cf22 ,\cb3\cf9 7\cb3\cf22 );
\par     \cb3\cf13\b cout\b0\cb3\cf22 <<\cb3\cf17 "   "\cb3\cf22 <<\cb1\cf0 SillaBarbero\cb3\cf22 ;
\par     \cb3\cf13\b cout\b0\cb3\cf22 <<\cb3\cf13\b endl\b0\cb3\cf22 ;
\par     \cb1\cf0 gotoxy\cb3\cf22 (\cb3\cf9 6\cb3\cf22 ,\cb3\cf9 8\cb3\cf22 );
\par     \cb3\cf13\b cout\b0\cb3\cf22 <<\cb3\cf17 "   _"\cb3\cf22 <<\cb3\cf13\b endl\b0\cb3\cf22 ;
\par     \cb3\cf13\b cout\b0\cb3\cf22 <<\cb3\cf13\b endl\b0\cb3\cf22 ;
\par     \cb1\cf0 gotoxy\cb3\cf22 (\cb3\cf9 6\cb3\cf22 ,\cb3\cf9 9\cb3\cf22 );
\par     \cb3\cf13\b cout\b0\cb3\cf22 <<\cb3\cf17 "   1"\cb3\cf22 <<\cb3\cf13\b endl\b0\cb3\cf22 ;
\par     \cb1\cf0 gotoxy\cb3\cf22 (\cb3\cf9 6\cb3\cf22 ,\cb3\cf9 11\cb3\cf22 );
\par     \cb3\cf13\b cout\b0\cb3\cf22 <<\cb3\cf17 "Tiempo de Corte: "\cb3\cf22 <<\cb1\cf0 Time\cb3\cf22 <<\cb3\cf17 " Tiempo Restante: "\cb3\cf22 <<\cb1\cf0 b\cb3\cf22 <<\cb3\cf13\b endl\b0\cb3\cf22 ;
\par     \cb1\cf0 gotoxy\cb3\cf22 (\cb3\cf9 12\cb3\cf22 ,\cb3\cf9 12\cb3\cf22 );
\par     \cb3\cf13\b cout\b0\cb3\cf22 <<\cb3\cf17 "PRESIONE ESC PARA SALIR "\cb3\cf22 <<\cb3\cf13\b endl\b0\cb3\cf22 ;
\par 
\par \}
\par 
\par \cb3\cf5 //Funcion que asigna tiempo de trabajo al Barbero, numero random entre 2 y 5
\par \cb3\cf11\b int \b0\cb1\cf0 Tiempo\cb3\cf22 ()
\par \{
\par     \cb3\cf11\b int \b0\cb1\cf0 num\cb3\cf22 ;
\par     \cb1\cf0 num\cb3\cf22 =\cb3\cf9 2\cb3\cf22 +\cb1\cf0 rand\cb3\cf22 ()%(\cb3\cf9 5\cb3\cf22 -\cb3\cf9 1\cb3\cf22 );
\par     \cb3\cf11\b return \b0\cb1\cf0 num\cb3\cf22 ;
\par \}
\par 
\par \cb3\cf5 //Funcion que indica en cuanto tiempo ingresa un nuevo cliente, un numero random entre 1 y 5
\par \cb3\cf11\b int \b0\cb1\cf0 TiempoCliente\cb3\cf22 ()
\par \{
\par     \cb3\cf11\b int \b0\cb1\cf0 num\cb3\cf22 ;
\par     \cb1\cf0 num\cb3\cf22 =\cb3\cf9 1\cb3\cf22 +\cb1\cf0 rand\cb3\cf22 ()%(\cb3\cf9 5\cb3\cf22 -\cb3\cf9 1\cb3\cf22 );
\par     \cb3\cf11\b return \b0\cb1\cf0 num\cb3\cf22 ;
\par \}
\par 
\par \cb3\cf5 //Funcion que se encarga de pasar Clientes de las Sillas de Espera a la Silla del Barbero
\par \cb3\cf11\b void \b0\cb1\cf0 LlenarSillaBarbero\cb3\cf22 ()
\par \{
\par     \cb1\cf0 Imprimir\cb3\cf22 ();
\par     \cb3\cf11\b int \b0\cb1\cf0 a\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ,\cb1\cf0 d\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ,\cb1\cf0 c\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ;
\par     \cb1\cf0 a\cb3\cf22 =\cb1\cf0 myBarbero\cb3\cf22 ->\cb1\cf0 getPosicion\cb3\cf22 ();
\par     \cb1\cf0 c\cb3\cf22 =\cb1\cf0 a\cb3\cf22 -\cb3\cf9 1\cb3\cf22 ;
\par     \cb3\cf11\b while\b0\cb3\cf22 (\cb1\cf0 c\cb3\cf22 !=\cb1\cf0 a\cb3\cf22 )
\par     \{
\par         \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 SillasEspera\cb3\cf22 [\cb1\cf0 a\cb3\cf22 ]==\cb3\cf9 1\cb3\cf22 )
\par         \{
\par             \cb1\cf0 Imprimir\cb3\cf22 ();
\par             \cb1\cf0 SillasEspera\cb3\cf22 [\cb1\cf0 a\cb3\cf22 ]=\cb3\cf9 0\cb3\cf22 ;
\par             \cb1\cf0 SillaBarbero\cb3\cf22 =\cb3\cf9 1\cb3\cf22 ;
\par             \cb1\cf0 d\cb3\cf22 =\cb1\cf0 a\cb3\cf22 +\cb3\cf9 1\cb3\cf22 ;
\par             \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 d\cb3\cf22 ==\cb3\cf9 4\cb3\cf22 )
\par             \{
\par                 \cb1\cf0 d\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ;
\par             \}
\par             \cb1\cf0 myBarbero\cb3\cf22 ->\cb1\cf0 setPosicion\cb3\cf22 (\cb1\cf0 d\cb3\cf22 );
\par             \cb1\cf0 Imprimir\cb3\cf22 ();
\par             \cb3\cf11\b break\b0\cb3\cf22 ;
\par         \}
\par         \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 SillasEspera\cb3\cf22 [\cb1\cf0 a\cb3\cf22 ]==\cb3\cf9 0\cb3\cf22 )
\par         \{
\par             \cb1\cf0 a\cb3\cf22 =\cb1\cf0 a\cb3\cf22 +\cb3\cf9 1\cb3\cf22 ;
\par             \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 a\cb3\cf22 ==\cb3\cf9 4\cb3\cf22 )
\par             \{
\par                 \cb1\cf0 a\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ;
\par                 \cb1\cf0 c\cb3\cf22 =\cb1\cf0 a\cb3\cf22 -\cb3\cf9 1\cb3\cf22 ;
\par             \}
\par         \}
\par         \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 c\cb3\cf22 ==-\cb3\cf9 1\cb3\cf22 )
\par         \{
\par             \cb1\cf0 c\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ;
\par         \}
\par     \}
\par     \cb1\cf0 Imprimir\cb3\cf22 ();
\par \}
\par 
\par \cb3\cf5 //Funcion que se encarga de buscar Silla cuando llega un nuevo Cliente
\par \cb3\cf11\b void \b0\cb1\cf0 LlegadaClientes\cb3\cf22 ()
\par \{
\par     \cb3\cf11\b int \b0\cb1\cf0 a\cb3\cf22 =\cb1\cf0 UltimaPos\cb3\cf22 ;
\par     \cb1\cf0 Imprimir\cb3\cf22 ();
\par     \cb1\cf0 gotoxy\cb3\cf22 (\cb3\cf9 6\cb3\cf22 ,\cb3\cf9 14\cb3\cf22 );
\par     \cb3\cf13\b cout\b0\cb3\cf22 <<\cb3\cf17 "Entra un nuevo cliente"\cb3\cf22 <<\cb3\cf13\b endl\b0\cb3\cf22 ;
\par     \cb1\cf0 Imprimir\cb3\cf22 ();
\par     \cb1\cf0 gotoxy\cb3\cf22 (\cb3\cf9 6\cb3\cf22 ,\cb3\cf9 15\cb3\cf22 );
\par     \cb3\cf13\b cout\b0\cb3\cf22 <<\cb3\cf17 "Verificando sillas"\cb3\cf22 <<\cb3\cf13\b endl\b0\cb3\cf22 ;
\par     \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 a\cb3\cf22 <\cb3\cf9 4\cb3\cf22 )
\par     \{
\par         \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 SillasEspera\cb3\cf22 [\cb1\cf0 a\cb3\cf22 ]==\cb3\cf9 0 \cb3\cf22 && \cb1\cf0 SemaforoCliente\cb3\cf22 ==\cb3\cf9 0\cb3\cf22 )
\par         \{
\par             \cb1\cf0 Imprimir\cb3\cf22 ();
\par             \cb1\cf0 SillasEspera\cb3\cf22 [\cb1\cf0 a\cb3\cf22 ]=\cb3\cf9 1\cb3\cf22 ;
\par             \cb1\cf0 SemaforoCliente\cb3\cf22 =\cb3\cf9 1\cb3\cf22 ;
\par             \cb1\cf0 UltimaPos\cb3\cf22 =\cb1\cf0 a\cb3\cf22 +\cb3\cf9 1\cb3\cf22 ;
\par             \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 UltimaPos\cb3\cf22 ==\cb3\cf9 4\cb3\cf22 )
\par             \{
\par                 \cb1\cf0 UltimaPos\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ;
\par                 \cb1\cf0 a\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ;
\par             \}
\par             \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 SillaBarbero\cb3\cf22 ==\cb3\cf9 0\cb3\cf22 )
\par             \{
\par                 \cb1\cf0 LlenarSillaBarbero\cb3\cf22 ();
\par             \}
\par         \}
\par     \}
\par     \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 SemaforoCliente\cb3\cf22 ==\cb3\cf9 0\cb3\cf22 )
\par     \{
\par         \cb1\cf0 Imprimir\cb3\cf22 ();
\par         \cb1\cf0 gotoxy\cb3\cf22 (\cb3\cf9 6\cb3\cf22 ,\cb3\cf9 16\cb3\cf22 );
\par         \cb3\cf13\b cout\b0\cb3\cf22 <<\cb3\cf17 "Cliente Saliendo"\cb3\cf22 <<\cb3\cf13\b endl\b0\cb3\cf22 ;
\par     \}
\par     \cb1\cf0 SemaforoCliente\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ;
\par \}
\par 
\par \cb3\cf11\b int \b0\cb1\cf0 main\cb3\cf22 ()
\par \{
\par     \cb3\cf11\b int \b0\cb1\cf0 TiempoEspera\cb3\cf22 ;\cb3\cf5 //Variable que contara el tiempo para la llegada de un nuevo Cliente
\par     \cb1\cf0 IniciarSillas\cb3\cf22 ();\cb3\cf5 //Inician las Sillas
\par     \cb1\cf0 TiempoEspera\cb3\cf22 =\cb1\cf0 TiempoCliente\cb3\cf22 ();\cb3\cf5 //Se asigna el tiempo de espera para que llegue un nuevo Cliente
\par     \cb3\cf11\b do
\par     \b0\cb3\cf22 \{
\par         \cb3\cf5 //Si la silla del barbero esta ocupada
\par         \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 SillaBarbero\cb3\cf22 ==\cb3\cf9 1\cb3\cf22 )
\par         \{
\par             \cb1\cf0 Time\cb3\cf22 =\cb1\cf0 Tiempo\cb3\cf22 ();\cb3\cf5 //Se Asigna un tiempo de trabajo
\par             \cb3\cf11\b for\b0\cb3\cf22 (\cb1\cf0 b\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ; \cb1\cf0 b\cb3\cf22 <=\cb1\cf0 Time\cb3\cf22 ; \cb1\cf0 b\cb3\cf22 ++)\cb3\cf5 //Inicia el trabajo del Barbero
\par             \cb3\cf22 \{
\par                 \cb1\cf0 myBarbero\cb3\cf22 ->\cb1\cf0 setEstado\cb3\cf22 (\cb3\cf9 1\cb3\cf22 );\cb3\cf5 //El estado del Barbero Cambia a Despierto
\par                 \cb1\cf0 TiempoEspera\cb3\cf22 =\cb1\cf0 TiempoEspera\cb3\cf22 -\cb3\cf9 1\cb3\cf22 ;\cb3\cf5 //El tiempo de espera para la llegada de un nuevo cliente disminuye mientras el Barbero trabaja
\par                 \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 TiempoEspera\cb3\cf22 <\cb3\cf9 0\cb3\cf22 )\cb3\cf5 //Si el tiempo de espera llega a ser negativo
\par                 \cb3\cf22 \{
\par                     \cb3\cf5 //Se asiganara un nuevo tiempo de espera
\par                     \cb1\cf0 TiempoEspera\cb3\cf22 =\cb1\cf0 TiempoCliente\cb3\cf22 ();
\par                 \}
\par                 \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 TiempoEspera\cb3\cf22 ==\cb3\cf9 0\cb3\cf22 )\cb3\cf5 //Si el tiempo se agota
\par                 \cb3\cf22 \{
\par                     \cb3\cf5 //LLega un nuevo cliente
\par                     \cb1\cf0 LlegadaClientes\cb3\cf22 ();
\par                     \cb3\cf5 //Se asigna un nuevo tiempo de espera
\par                     \cb1\cf0 TiempoEspera\cb3\cf22 =\cb1\cf0 TiempoCliente\cb3\cf22 ();
\par                 \}
\par                 \cb3\cf5 //Se imprime las sillas y estado del Barbero
\par                 \cb1\cf0 Imprimir\cb3\cf22 ();
\par             \}
\par             \cb3\cf5 //Una vez que el Barbero termina su trabajo su Silla se vacia
\par             \cb1\cf0 SillaBarbero\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ;
\par         \}
\par         \cb3\cf5 //El tiempo de trabajo del barbero vuelve a 0
\par         \cb1\cf0 b\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ;
\par         \cb1\cf0 Time\cb3\cf22 =\cb3\cf9 0\cb3\cf22 ;
\par         \cb3\cf5 //Si la silla del Barbero esta vacia
\par         \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 SillaBarbero\cb3\cf22 ==\cb3\cf9 0\cb3\cf22 )
\par         \{
\par             \cb1\cf0 Imprimir\cb3\cf22 ();
\par             \cb1\cf0 myBarbero\cb3\cf22 ->\cb1\cf0 setEstado\cb3\cf22 (\cb3\cf9 0\cb3\cf22 );\cb3\cf5 //Se cambia el estado del Barbero a Dormido
\par             \cb1\cf0 LlenarSillaBarbero\cb3\cf22 ();\cb3\cf5 //Se buscan clientes en la Sillas de Espera
\par             //Si el tiempo de espera para la llegada de un nuevo cliente se agota
\par             \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 TiempoEspera\cb3\cf22 ==\cb3\cf9 0\cb3\cf22 )
\par             \{
\par 
\par                 \cb1\cf0 LlegadaClientes\cb3\cf22 ();\cb3\cf5 //Llega un cliente
\par                 \cb1\cf0 TiempoEspera\cb3\cf22 =\cb1\cf0 TiempoCliente\cb3\cf22 ();\cb3\cf5 //Se renueva el tiempo para la llegada de otro cliente
\par             \cb3\cf22 \}
\par             \cb3\cf5 //Si el tiempo de espera es mayor que 0 entonces el tiempo continua disminuyendo
\par             \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 TiempoEspera\cb3\cf22 !=\cb3\cf9 0\cb3\cf22 )
\par             \{
\par                 \cb1\cf0 TiempoEspera\cb3\cf22 =\cb1\cf0 TiempoEspera\cb3\cf22 -\cb3\cf9 1\cb3\cf22 ;
\par             \}
\par         \}
\par 
\par     \cb3\cf5 //Se recibe la tecla Esc para salir del programa
\par     \cb3\cf22 \}\cb3\cf11\b while\b0\cb3\cf22 (\cb1\cf0 getch\cb3\cf22 ()!=\cb3\cf9 27\cb3\cf22 );
\par     \cb3\cf11\b return \b0\cb3\cf9 0\cb3\cf22 ;
\par \}
\par }